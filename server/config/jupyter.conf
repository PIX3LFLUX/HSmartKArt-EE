# top-level http config for websocket headers
# If Upgrade is defined, Connection = upgrade
# If Upgrade is empty, Connection = close
# The $http_upgrade value is derived from client header upgrade
map $http_upgrade $connection_upgrade {
	default upgrade;
	''      close;
}

#upstream websocket {
#       server 127.0.0.1:8000;
#}

# HTTP server to redirect all 80 traffic to SSL/HTTPS
server {
	listen 80;
	listen [::]:80;
	server_name mqttee-server.tk;

	# Tell all requests to port 80 to be 301 redirected to HTTPS
	return 301 https://$host$request_uri;
}

server {

	listen 443 ssl; # managed by Certbot
	listen [::]:443 ssl ipv6only=on; # managed by Certbot

	server_name mqttee-server.tk; # managed by Certbot

	ssl_certificate /etc/letsencrypt/live/mqttee-server.tk/fullchain.pem; # managed by Certbot
	ssl_certificate_key /etc/letsencrypt/live/mqttee-server.tk/privkey.pem; # managed by Certbot

	include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
	ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot

	# Managing literal requests to the JupyterHub front end
	location / {
		proxy_pass https://127.0.0.1:8000;
		proxy_set_header X-Real-IP $remote_addr;
		proxy_set_header Host $host;
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

		# websocket headers
		proxy_http_version 1.1;
		proxy_set_header Upgrade $http_upgrade;
		proxy_set_header Connection $connection_upgrade;

		proxy_buffering off;
	}

	# Managing requests to verify letsencrypt host
	location ~ /.well-known {
		allow all;
	}

}
